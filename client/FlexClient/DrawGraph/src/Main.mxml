<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:flashcommander="org.flashcommander.*"
			   xmlns:components="org.flashcommander.components.*"
			   creationComplete="initu()"
			   height="100%"
			   width="100%"
			   >
		
	<fx:Script>
		<![CDATA[
		
		import flash.events.Event;
		import mx.controls.Text;
		import mx.events.FlexEvent;
		import spark.components.Group;
		
		import DrawGraph;
		import Network;
		import DrawSplash;
		import SearchButton;
		import Graph;
		
		public var myAutoComplete:CustomAutoComplete;
		private var searchBtn : SearchButton;
		private var graphObj : Graph;
		
		/**
		 * This function sets the focus to the autocomplete Group once that
		 * group has initialized.
		 */
		private var onLoadFocus : Function = function (event : Event) : void
		{
			trace("onLoadFocus");
			focusManager.setFocus(this.auto);
		}
		
		/**
		 * Initialize the application.
		 */
		public function initu():void {
			
			// Create a class to handle graph operations.
			graphObj = new Graph(graph, this);
			
			// Set the focus to the autocomplete Group once it has initialized.
			this.auto.addEventListener(FlexEvent.INITIALIZE, onLoadFocus);
			
			// Create autocomplete bar object.
			myAutoComplete = new CustomAutoComplete(auto, graphObj);
			
			// Create class to handle search button activity.
			searchBtn = new SearchButton(searchButton, myAutoComplete, graphObj);
			myAutoComplete.searchBtn = searchBtn;
			
			// Set width of the text input and location of search button.
			setTextInputSize();
			
			// Set resizable behavior for window.
			this.addEventListener(Event.RESIZE, resizeHandler);
			
			this.graphObj.load();
		}
		
		/**
		 * Resize the graph and navigation controls.
		 * @param	event
		 */
		private function resizeHandler(event:Event):void {
			graphObj.resize(false);
			
			setTextInputSize(); 
		}
		
		/**
		 * Set width of the text input and search button location.
		 */
		private function setTextInputSize():void {
			searchBtn.setX();
			myAutoComplete.reSize();
		}
		
		/**
		 * Draw splash, clear search bar.
		 * 
		 * @param	env
		 */
		public function drawSplash(env : Group, clearHash : Boolean = true) : void 
		{
			if (clearHash)
			{
				this.graphObj.hide();
			}
			
			this.myAutoComplete.clearText();
			DrawSplash.DrawS(env);
			this.myAutoComplete.focusOnSearch();
		}
		
		public function buttonHover(node:BorderContainer):void {
			node.setStyle("backgroundColor", 0xE0E0FF);
		}
		
		public function buttonAway(node:BorderContainer):void {
			node.setStyle("backgroundColor", 0xEEEEEE);
		}
		]]> 
	</fx:Script>
	
	<fx:Style>
		#history {background-color: #FF00FF}
	</fx:Style>

	<s:Group id="graph" height="100%" width="100%" y="25" addedToStage="drawSplash(graph, false)">
	</s:Group>
	
	<s:BorderContainer id="toolBar" height="48" width="100%" backgroundColor="0xCCCCDD">
		<s:BorderContainer id="logoButton" x="8" y="8" width="160" height="32" backgroundColor="0xEEEEEE" cornerRadius="16" borderWeight="2" 
		borderColor="0xBBBBBB" click="drawSplash(graph)" mouseOver="buttonHover(logoButton)" mouseOut="buttonAway(logoButton)">
			<mx:Label id="logoText" text="WikiGraph Home" color="0x444444" width="160" height="32" fontSize="18" textAlign="center" y="2"></mx:Label>
		</s:BorderContainer>
	
		<s:Group id="searchForms" height="100%" width="100%">
			<s:Group id="history" height="100%" width="150">
			</s:Group>
			
			<s:Group id="auto" height="100%" width="100%">
			</s:Group>
		</s:Group>
		
		<s:BorderContainer id="searchButton" y="8" width="100" height="32" backgroundColor="0xEEEEEE" cornerRadius="16" borderWeight="2" 
		borderColor="0xBBBBBB" mouseOver="buttonHover(searchButton)" mouseOut="buttonAway(searchButton)">
			<mx:Label id="searchButtonText" text="Search" color="0x444444" width="100" height="32" fontSize="18" textAlign="center" y="2"></mx:Label>
		</s:BorderContainer>
	</s:BorderContainer>
	
	<s:Group id="loading">
			<s:Group id="loadingImg" y ="50">
			</s:Group>
			
			<mx:Text id="loadingText" y = "50" x="16">
			</mx:Text>
	</s:Group>
	
</s:Application>
